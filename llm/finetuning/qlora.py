# -*- coding: utf-8 -*-
"""Copy of Fine-tune Llama 2 with QLoRA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Enyy6dwOFC34PIiJ1zU6QBskHyrqkXUY

# Fine-tune Llama 2 with QLoRA
T4 GPU

## Packages and Imports
"""

!pip install -q accelerate==0.21.0
!pip install -q peft==0.4.0
!pip install -q bitsandbytes==0.40.2
!pip install -q transformers==4.31.0
!pip install -q trl==0.4.7
!pip install -q huggingface_hub

from datasets import load_dataset, Dataset

import os
import torch

from transformers import (
    AutoModelForCausalLM,
    AutoTokenizer,
    BitsAndBytesConfig,
    HfArgumentParser,
    TrainingArguments,
    pipeline,
    logging,
)
from peft import LoraConfig, PeftModel
from trl import SFTTrainer

"""## Parameters

### Model
"""

# The model that you want to train from the Hugging Face hub
model_name = "meta-llama/Llama-2-7b-chat-hf"

# Fine-tuned model name
new_model = "llama-2-7b-chat-topicextract"

"""### Dataset"""

# The instruction dataset to use
dataset_name = "dbpedia_14"

# Size of dataset to train on
sample_size = 1000

# Load dataset (you can process it here)
split = f"train[:{sample_size}]"
dataset = load_dataset(dataset_name, split=split)

dataset

"""### QLoRA"""

# LoRA attention dimension
lora_r = 64

# Alpha parameter for LoRA scaling
lora_alpha = 16

# Dropout probability for LoRA layers
lora_dropout = 0.1

# Load LoRA configuration
peft_config = LoraConfig(
    lora_alpha=lora_alpha,
    lora_dropout=lora_dropout,
    r=lora_r,
    bias="none",
    task_type="CAUSAL_LM",
)

"""### BitsandBytes"""

# Activate 4-bit precision base model loading
use_4bit = True

# Compute dtype for 4-bit base models
bnb_4bit_compute_dtype = "float16"

# Quantization type (fp4 or nf4)
bnb_4bit_quant_type = "nf4"

# Activate nested quantization for 4-bit base models (double quantization)
use_nested_quant = False

# Load tokenizer and model with QLoRA configuration
compute_dtype = getattr(torch, bnb_4bit_compute_dtype)

# Check GPU compatibility with bfloat16
if compute_dtype == torch.float16 and use_4bit:
    major, _ = torch.cuda.get_device_capability()
    print(major)
    if major >= 8:
        print("=" * 80)
        print("Your GPU supports bfloat16: accelerate training with bf16=True")
        print("=" * 80)

bnb_config = BitsAndBytesConfig(
    load_in_4bit=use_4bit,
    bnb_4bit_quant_type=bnb_4bit_quant_type,
    bnb_4bit_compute_dtype=compute_dtype,
    bnb_4bit_use_double_quant=use_nested_quant,
)

"""### TrainingArguments"""

# Output directory where the model predictions and checkpoints will be stored
output_dir = "./results"

# Number of training epochs
num_train_epochs = 1

# Enable fp16/bf16 training (set bf16 to True with an A100)
fp16 = False
bf16 = False

# Batch size per GPU for training
per_device_train_batch_size = 4

# Batch size per GPU for evaluation
per_device_eval_batch_size = 4

# Number of update steps to accumulate the gradients for
gradient_accumulation_steps = 1

# Enable gradient checkpointing
gradient_checkpointing = True

# Maximum gradient normal (gradient clipping)
max_grad_norm = 0.3

# Initial learning rate (AdamW optimizer)
learning_rate = 2e-4

# Weight decay to apply to all layers except bias/LayerNorm weights
weight_decay = 0.001

# Optimizer to use
optim = "paged_adamw_32bit"

# Learning rate schedule
lr_scheduler_type = "cosine"

# Number of training steps (overrides num_train_epochs)
max_steps = -1

# Ratio of steps for a linear warmup (from 0 to learning rate)
warmup_ratio = 0.03

# Group sequences into batches with same length
# Saves memory and speeds up training considerably
group_by_length = True

# Save checkpoint every X updates steps
save_steps = 0

# Log every X updates steps
logging_steps = 25

# Set training parameters
training_arguments = TrainingArguments(
    output_dir=output_dir,
    num_train_epochs=num_train_epochs,
    per_device_train_batch_size=per_device_train_batch_size,
    gradient_accumulation_steps=gradient_accumulation_steps,
    optim=optim,
    save_steps=save_steps,
    logging_steps=logging_steps,
    learning_rate=learning_rate,
    weight_decay=weight_decay,
    fp16=fp16,
    bf16=bf16,
    max_grad_norm=max_grad_norm,
    max_steps=max_steps,
    warmup_ratio=warmup_ratio,
    group_by_length=group_by_length,
    lr_scheduler_type=lr_scheduler_type,
    report_to="tensorboard"
)

"""### SFT"""

# Maximum sequence length to use
max_seq_length = None

# Pack multiple short examples in the same input sequence to increase efficiency
packing = False

# Load the entire model on the GPU 0
device_map = {"": 0}

"""## Training

### Login to Hub
Use [WRITE] access token.

You can create it here: https://huggingface.co/settings/tokens
"""

from huggingface_hub import notebook_login

notebook_login()

"""### Loading Model and Tokenizer"""

# Load base model
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    quantization_config=bnb_config,
    device_map=device_map
)
model.config.use_cache = False
model.config.pretraining_tp = 1

# Load LLaMA tokenizer
tokenizer = AutoTokenizer.from_pretrained(model_name, trust_remote_code=True)
tokenizer.pad_token = tokenizer.eos_token
tokenizer.padding_side = "right" # Fix weird overflow issue with fp16 training

"""### Setting up SFT Trainer"""

# Set supervised fine-tuning parameters
trainer = SFTTrainer(
    model=model,
    train_dataset=dataset,
    peft_config=peft_config,
    dataset_text_field="title",
    max_seq_length=max_seq_length,
    tokenizer=tokenizer,
    args=training_arguments,
    packing=packing,
)

"""### Start Training"""

# Train model
trainer.train()

# Save trained model
trainer.model.save_pretrained(new_model)

"""### Reloading and Saving Model and Tokenizer"""

# %load_ext tensorboard
# %tensorboard --logdir results/runs

# Empty VRAM
del model
del trainer
import gc
gc.collect()
gc.collect()

# Reload model in FP16 and merge it with LoRA weights
base_model = AutoModelForCausalLM.from_pretrained(
    model_name,
    low_cpu_mem_usage=True,
    return_dict=True,
    torch_dtype=torch.float16,
    device_map=device_map,
)
model = PeftModel.from_pretrained(base_model, new_model)
model = model.merge_and_unload()

# Reload tokenizer to save it
tokenizer = AutoTokenizer.from_pretrained(model_name, trust_remote_code=True)
tokenizer.pad_token = tokenizer.eos_token
tokenizer.padding_side = "right"

model.save_pretrained(f"/content/{new_model}/model/")
tokenizer.save_pretrained(f"/content/{new_model}/tokenizer/")
tokenizer.save_vocabulary(f"/content/{new_model}/tokenizer/")

"""# Converting LoRA to GGUF

## Install Requirements
"""

# https://stackoverflow.com/questions/56081324/why-are-google-colab-shell-commands-not-working
import locale
def getpreferredencoding(do_setlocale = True):
    return "UTF-8"
locale.getpreferredencoding = getpreferredencoding

!pip install -q -U git+https://github.com/huggingface/transformers.git
!pip install -q -U git+https://github.com/huggingface/accelerate.git
!pip install -q einops
!pip install numpy==1.24
!pip install sentencepiece==0.1.98

import os
import torch
import torch.nn as nn
from transformers import AutoTokenizer, AutoConfig, AutoModelForCausalLM

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/ggerganov/llama.cpp.git
# %cd llama.cpp

"""## Build llama.cpp"""

!apt update
!apt install build-essential git cmake libopenblas-dev libeigen3-dev

!make LLAMA_OPENBLAS=1

!python3 -m pip install -r requirements.txt



"""## Convert to GGML
Script runs is located in llama.cpp directory
- outfile:    path to outdirectory
- vocab-dir:  path to vocabulary (tokenizer.model)
"""

# Commented out IPython magic to ensure Python compatibility.
# %pwd
model_path = f"{new_model}/model"
tokenizer_path = f"{new_model}/tokenizer"




!python convert.py $model_path  --vocab-dir $tokenizer_path
!./quantize /content/llama-2-7b-chat-topicextract/model/ggml-model-f16.gguf /content/llama-2-7b-chat-topicextract/model/llama-2-7b-chat-topicextract-q3_K_M.gguf q3_K_M
!./quantize /content/llama-2-7b-chat-topicextract/model/ggml-model-f16.gguf /content/llama-2-7b-chat-topicextract/model/ggml-model-q4_K_M.gguf Q4_K_M




"""# Uploading Trained Model to Hub
### Push
Upload files to existing HF repository
"""

from huggingface_hub import HfApi
api = HfApi()

api.upload_folder(
    folder_path="/content/llama-2-7b-chat-topicextract/gguf",
    repo_id="hikami172/llama-2-7b-chat-topicextract-GGUF",
    repo_type="model",
)